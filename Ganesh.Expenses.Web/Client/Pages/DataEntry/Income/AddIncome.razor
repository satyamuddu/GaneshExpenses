@page "/pages/dataentry/addincome"

@inject NavigationManager NavigationManager 
@inject HttpClient Http
@using System
<h3>AddI ncome</h3>

<MudText Typo="Typo.h4" GutterBottom="true">Add New Income Details</MudText>

<MudDatePicker Label="Date" Editable="true" @bind-Date="date" />

<MudSelect T="IncomeType" Label="Income Type" @bind-Value="@incometype" >
     @foreach (IncomeType item in incometypes)
            {
                <MudSelectItem Value="@item">@item.Name</MudSelectItem>
            }
</MudSelect>

<MudTextField @bind-Value="income.Amount" T="float" Label="Amount" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="income.Description" T="string" Label="Description" Variant="Variant.Outlined"></MudTextField>

<MudSelect T="Bank" Label="Bank Name" @bind-Value="@bank" >
     @foreach (Bank item in banks)
            {
                <MudSelectItem Value="@item">@item.Name, @item.BankName, @item.AccountNumber</MudSelectItem>
            }
</MudSelect>

<div Class="d-flex justify-space-between align-center">

<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!allFieldsEntered)" Size="Size.Large" @onclick="@(() => AddAsync())">Save</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!allFieldsEntered)" Link="pages/dataentry/incomelist" Size="Size.Large">Cancel</MudButton>
</div>


@code {
    public bool allFieldsEntered { get; set; } = true;
    protected Income income { get; set; } = new Income();
    private DateTime? date = DateTime.Today;
    private List<IncomeType> incometypes { get; set; } = new List<IncomeType>();
    private IncomeType incometype;
    private List<Bank> banks { get; set; } = new List<Bank>();
    private Bank bank;
    Ganesh.Expenses.Web.Client.Services.ExpensesService<IncomeType> expensesServiceIncomeType;
    Ganesh.Expenses.Web.Client.Services.ServiceParameter serviceParameterIncomeType;

    Ganesh.Expenses.Web.Client.Services.ExpensesService<Bank> expensesServiceBank;
    Ganesh.Expenses.Web.Client.Services.ServiceParameter serviceParameterBank;


    protected async override Task OnInitializedAsync()
    {
        expensesServiceIncomeType = new Ganesh.Expenses.Web.Client.Services.ExpensesService<IncomeType>(Http);
        serviceParameterIncomeType = new Ganesh.Expenses.Web.Client.Services.ServiceParameter("api/incometypes");
        incometypes = await expensesServiceIncomeType.GetList(serviceParameterIncomeType);

        expensesServiceBank = new Ganesh.Expenses.Web.Client.Services.ExpensesService<Bank>(Http);
        serviceParameterBank = new Ganesh.Expenses.Web.Client.Services.ServiceParameter("api/banks");
        banks = await expensesServiceBank.GetList(serviceParameterBank);


        await base.OnInitializedAsync();
    }

    protected async Task AddAsync()
    {
        if (incometype != null)
        {
            income.IncomeTypeId = incometype.Id;
        }
        if (bank!=null)
        {
            income.BankId = bank.Id;
        }
        income.Date = date.Value;
        Ganesh.Expenses.Web.Client.Services.IServiceParameter serviceParameter = new Ganesh.Expenses.Web.Client.Services.ServiceParameter("api/incomes");
        Ganesh.Expenses.Web.Client.Services.IExpensesService<Income> expensesService = new Ganesh.Expenses.Web.Client.Services.ExpensesService<Income>(Http);
        await expensesService.AddItem(income, serviceParameter);
            
        NavigationManager.NavigateTo("/pages/dataentry/incomelist");
    }
}
