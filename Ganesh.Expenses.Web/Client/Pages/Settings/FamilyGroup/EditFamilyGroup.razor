@page "/pages/settings/editfamilygroup/{id}"
@inject HttpClient Http

<h3>Edit FamilyGroup</h3>

<MudText Typo="Typo.h4" GutterBottom="true">Edit New FamilyGroup Details</MudText>

<MudTextField @bind-Value="FamilyGroup.Name" T="string" Label="ex : Family, Friends, Neighours etc" Variant="Variant.Outlined"></MudTextField>
<div Class="d-flex justify-space-between align-center">
<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!allFieldsEntered)" Size="Size.Large" @onclick="@(() => Update())">Update</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!allFieldsEntered)" Link="/pages/settings/relationrypelist" Size="Size.Large">Cancel</MudButton>
</div>

@code {
    public bool allFieldsEntered { get; set; } = true;
    [Parameter]
    public string id{ get; set; }
    public FamilyGroup FamilyGroup { get; set; } = new FamilyGroup();
    private Ganesh.Expenses.Web.Client.Services.IExpensesService<FamilyGroup> expensesService;
    private Ganesh.Expenses.Web.Client.Services.IServiceParameter serviceParameter { get; set; }
    = new Ganesh.Expenses.Web.Client.Services.ServiceParameter("api/familygroups");

    protected override async Task OnInitializedAsync()
    {
        expensesService = new Ganesh.Expenses.Web.Client.Services.ExpensesService<FamilyGroup>(Http);
        FamilyGroup = await expensesService.GetItem(Convert.ToInt32(id), serviceParameter);
    }
    async Task Update()
    {
        await expensesService.UpdateItem(FamilyGroup.Id, FamilyGroup, serviceParameter);
        @inject NavigationManager navigationManager;
        navigationManager.NavigateTo("/pages/settings/familygrouppage");
    }
}
