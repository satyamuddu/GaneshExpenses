@page "/pages/settings/productslist"
@using Ganesh.Expenses.Web.Shared
@inject HttpClient Http
@inject MudBlazor.ISnackbar snackBar

<MudTable Height="500px" Items="@Products" Dense=true Filter="new Func<Product, bool>(Search)">
     <ToolBarContent>
        <MudText Typo="Typo.h6">List of Products ...</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Category</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Unit</MudTh>
        <MudTh>Description</MudTh>
    </HeaderContent>
     <RowTemplate>
         <MudTd DataLabel="Category">@if(@context.Category!=null) @context.Category.Name</MudTd>
         <MudTd DataLabel="Product Name">@context.Name</MudTd>
         <MudTd DataLabel="Unit">@if(@context.Unit!=null) @context.Unit.Name</MudTd>
         <MudTd DataLabel="Description">@context.Description</MudTd>
         <MudTd DataLabel="">
            <MudFab Link=@link @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"  />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
     </RowTemplate>
</MudTable>


@code {
    private List<Product> Products = new List<Product>();

    private Product Product = null;
    private string searchString = "";
    private string link;
    private Ganesh.Expenses.Web.Client.Services.IExpensesService<Product> expensesService;
    private Ganesh.Expenses.Web.Client.Services.IServiceParameter serviceParameter;

    protected override async Task OnInitializedAsync()
    {
        expensesService = new Ganesh.Expenses.Web.Client.Services.ExpensesService<Product>(Http);
        serviceParameter = new Ganesh.Expenses.Web.Client.Services.ServiceParameter("api/products");
        await GetProducts();
    }

    private bool Search(Product Product)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (Product.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
     private void Edit(int id)
    {
        link = $"/pages/settings/editproduct/{id}";
        Product = Products.FirstOrDefault(c => c.Id == id);
    }
    private async Task Delete(int id)
    {
        await expensesService.DeleteItem(id, serviceParameter);
        snackBar.Add("Product Deleted.", Severity.Success);
        await GetProducts();
    }
    private async Task<List<Product>> GetProducts()
    {
        Products = await expensesService.GetList(serviceParameter);
        return Products;
    }
}
