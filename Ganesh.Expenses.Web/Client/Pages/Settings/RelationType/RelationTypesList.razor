@page "/pages/settings/relationtypeslist"
@using Ganesh.Expenses.Web.Shared
@inject HttpClient Http
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService

<MudTable Height="500px" Items="@RelationTypes" Dense=true Filter="new Func<RelationType, bool>(Search)">
     <ToolBarContent>
        <MudText Typo="Typo.h6">List of RelationTypes ...</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>RelationType Name</MudTh>
    </HeaderContent>
     <RowTemplate>
         <MudTd DataLabel="RelationType Name">@context.Name</MudTd>
         <MudTd DataLabel="">
            <MudFab Link=@link @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"  />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
     </RowTemplate>
</MudTable>


@code {
    private List<RelationType> RelationTypes = new List<RelationType>();

    private RelationType RelationType = null;
    private string searchString = "";
    private string link;
    private Ganesh.Expenses.Web.Client.Services.IExpensesService<RelationType> expensesService;
    private Ganesh.Expenses.Web.Client.Services.IServiceParameter serviceParameter;
    protected override async Task OnInitializedAsync()
    {
        expensesService = new Ganesh.Expenses.Web.Client.Services.ExpensesService<RelationType>(Http);
        serviceParameter = new Ganesh.Expenses.Web.Client.Services.ServiceParameter("api/relationtypes"); 
        await GetRelationTypes();
    }

    private bool Search(RelationType RelationType)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (RelationType.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
     private void Edit(int id)
    {
        link = $"/pages/settings/editrelationtype/{id}";
        RelationType = RelationTypes.FirstOrDefault(c => c.Id == id);
    }
    private async Task Delete(int id)
    {
        bool proceed = await PageHelper.ShowConfirmationDialog(DialogService, "Delete","Do you really want to delete these records? This process cannot be undone.",Color.Error, "Delete");
        if(proceed==false)
        {
            return;
        }
        await expensesService.DeleteItem(id, serviceParameter);
        snackBar.Add("RelationType Deleted.", Severity.Success);
        await GetRelationTypes();
    }
    private async Task<List<RelationType>> GetRelationTypes()
    {
        RelationTypes = await expensesService.GetList(serviceParameter);

        return RelationTypes;
    }
}
