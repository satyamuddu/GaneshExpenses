@page "/pages/settings/unitslist"
@using Ganesh.Expenses.Web.Shared
@inject HttpClient Http
@inject MudBlazor.ISnackbar snackBar

<MudTable Items="@Units" Dense=true Filter="new Func<Unit, bool>(Search)">
     <ToolBarContent>
        <MudText Typo="Typo.h6">List of Units ...</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Unit Name</MudTh>
    </HeaderContent>
     <RowTemplate>
         <MudTd DataLabel="Unit Name">@context.Name</MudTd>
         <MudTd DataLabel="">
            <MudFab Link=@link @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"  />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
     </RowTemplate>
</MudTable>


@code {
    private List<Unit> Units = new List<Unit>();

    private Unit Unit = null;
    private string searchString = "";
    private string link;

    protected override async Task OnInitializedAsync()
    {
        await GetUnits();
    }

    private bool Search(Unit Unit)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (Unit.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
     private void Edit(int id)
    {
        link = $"/pages/settings/editunit/{id}";
        Unit = Units.FirstOrDefault(c => c.Id == id);
    }
    private async Task Delete(int id)
    {
        await Http.DeleteAsync($"api/units/{id}");
        snackBar.Add("Unit Deleted.", Severity.Success);
        await GetUnits();
    }
    private async Task<List<Unit>> GetUnits()
    {
        Units = new List<Unit>();
        Unit[] units = await Http.GetFromJsonAsync<Unit[]>("api/units");
        foreach(Unit b in units)
        {
            Units.Add(b);
        }
        return Units;
    }
}
